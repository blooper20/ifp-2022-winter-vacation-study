# 부모님을 기다리던 영일이는 검정/흰 색 바둑알을 바둑판에 꽉 채워 깔아 놓고 놀다가...
# "십(+)자 뒤집기를 해볼까?"하고 생각했다.
# 바둑판(19 * 19)에 흰 돌(1) 또는 검정 돌(0)이 모두 꽉 채워져 놓여있을 때, n개의 좌표를 입력받아 십(+)자 뒤집기한 결과를 출력하는 프로그램을 작성해보자.

# 입력
# 바둑알이 깔려 있는 상황이 19 * 19 크기의 정수값으로 입력된다.
# 십자 뒤집기 횟수(n)가 입력된다.
# 십자 뒤집기 좌표가 횟수(n) 만큼 입력된다. 단, n은 10이하의 자연수이다.
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 2
# 10 10
# 12 12

# 출력
# 십자 뒤집기 결과를 출력한다.
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

# Tip::
# 파이썬에서는 2차원 배열(행렬)을 쉽게 다룰 수 있도록하는 numpy 라이브러리가 있다.
# 문제에서 요구하는 방식대로 출력하기 위해 '*(Asterisk)'를 사용하였다.

# 내 풀이)
baduk = [
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
]
count = int(input())
for _ in range(count):
    x, y = map(int, input().split())
    for i in range(19):
        baduk[x-1][i] = 1 if baduk[x-1][i] == 0 else 0 
        baduk[i][y-1] = 1 if baduk[i][y-1] == 0 else 0 
for final in baduk:
  print( *final )
# 강의 풀이)
# 1. 초기 십자 바둑판 입력
baduk = []
for _ in range(19):
  matrix = list(map(int, input().split()))
  baduk.append(matrix)
# 2. n과 좌표 값을 입력받고 그에 따라 십자 형태에 맞춰 흑->백, 백->흑으로 변환
n = int(input())
for _ in range(n): # n번 입력
  x, y = map(int, input().split()) # x와 y 좌표 입력
  for i in range(19): # 변환
    baduk[i][y-1] = 1 if baduk[i][y-1] == 0 else 0 # 0->1, 1->0으로 변환
    baduk[x-1][i] = 1 if baduk[x-1][i] == 0 else 0 # 0->1, 1->0으로 변환
# 3. 변환된 값을 한 줄 단위로 출력
for i in range(19):
  print(*baduk[i])
